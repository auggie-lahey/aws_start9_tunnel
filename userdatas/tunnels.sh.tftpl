#!/bin/bash
sudo apt install jq -y
# tunnel installer
file="/etc/systemd/system/http-to-socks-proxy@.service"
cat << 'EOT' > $file
[Unit]
Description=HTTP-to-SOCKS proxy
After=network.target

[Service]
EnvironmentFile=/etc/http-to-socks-proxy/%i.conf
ExecStart=/usr/bin/socat tcp4-LISTEN:$${LOCAL_PORT},reuseaddr,fork,keepalive,bind=127.0.0.1 SOCKS4A:$${PROXY_HOST}:$${REMOTE_HOST}:$${REMOTE_PORT},socksport=$${PROXY_PORT}

[Install]
WantedBy=multi-user.target
EOT
mkdir /etc/http-to-socks-proxy

# when i add another service, add a for loop
cat <<EOT > generic1.conf
PROXY_HOST=127.0.0.1
PROXY_PORT=9050
LOCAL_PORT=__port__
REMOTE_HOST=__onion_address__
REMOTE_PORT=80
EOT
%{ for service in services }
cat generic1.conf | sed -e 's|__port__|${service.port}|g' -e 's|__onion_address__|${service.onion_address}|g' > /etc/http-to-socks-proxy/${service.name}.conf
ln -s /etc/systemd/system/http-to-socks-proxy\@.service /etc/systemd/system/multi-user.target.wants/http-to-socks-proxy\@${service.name}.service
systemctl start http-to-socks-proxy@${service.name}
systemctl status http-to-socks-proxy@${service.name}
%{ endfor ~}

netstat -tulpn | grep socat
openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 #4096
mkdir -p /var/lib/letsencrypt/.well-known
chgrp www-data /var/lib/letsencrypt
chmod g+s /var/lib/letsencrypt

cat <<'EOT' > /etc/nginx/conf.d/map.conf
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
default $http_x_forwarded_proto;
'' $scheme;
}

map $http_upgrade $connection_upgrade {
default upgrade;
'' close;
}
EOT

cat <<'EOT' > generic2.conf
server {
 listen 80;
 server_name __subdomain__.__domain__;

 # Let's Encrypt verification requests
 location ^~ /.well-known/acme-challenge/ {
  allow all;
  root /var/lib/letsencrypt/;
  default_type "text/plain";
  try_files $uri =404;
 }
 
 # Redirect everything else to https
 location / {
  #return 301 https://$server_name$request_uri;
  return 301 https://$server_name$request_uri/;
 }
}
server {
 listen 443 ssl http2;
 server_name __subdomain__.__domain__;

 # SSL settings
 ssl_stapling on;
 ssl_stapling_verify on;
 ssl_session_timeout 1d;
 ssl_session_cache shared:SSL:10m;
 ssl_session_tickets off;

 # Update this with the path of your certificate files
 ssl_certificate /etc/letsencrypt/live/__subdomain__.__domain__/fullchain.pem;
 ssl_certificate_key /etc/letsencrypt/live/__subdomain__.__domain__/privkey.pem;
 
 ssl_dhparam /etc/ssl/certs/dhparam.pem;
 ssl_protocols TLSv1.2 TLSv1.3;

 ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

 ssl_prefer_server_ciphers off;
 resolver 8.8.8.8 8.8.4.4 valid=300s;
 resolver_timeout 30s;

 add_header Strict-Transport-Security "max-age=63072000" always;
 add_header Content-Security-Policy "frame-ancestors 'self';";
 add_header X-Content-Type-Options nosniff;

 # Proxy requests to the socat service
 location / {
  proxy_pass http://127.0.0.1:__port__/;
  proxy_http_version 1.1;
  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;
  proxy_read_timeout 3600;
 }
}
EOT

%{ for service in services }
cat generic2.conf | sed -e 's|__subdomain__|${service.subdomain}|g' -e 's|__domain__|${domain}|g' -e 's|__port__|${service.port}|g' > /etc/nginx/sites-available/${service.name}.conf
ln -s /etc/nginx/sites-available/${service.name}.conf /etc/nginx/sites-enabled/${service.name}.conf

cert_exitsts=$(aws ssm get-parameter --name /certs/${service.subdomain}.${domain}/cert.pem)
fail=$?
if [[ "$fail" == "0" ]]; then # attempt to mitigate rate limit
    echo "${service.subdomain}.${domain} CERTS EXIST PULL FROM SSM"
    echo $cert_exists
    echo $fail
    mkdir -p /etc/letsencrypt/live/${service.subdomain}.${domain}
    aws ssm get-parameter --name /certs/${service.subdomain}.${domain}/cert.pem | jq -r .Parameter.Value > /etc/letsencrypt/live/${service.subdomain}.${domain}/cert.pem
    aws ssm get-parameter --name /certs/${service.subdomain}.${domain}/chain.pem | jq -r .Parameter.Value > /etc/letsencrypt/live/${service.subdomain}.${domain}/chain.pem
    aws ssm get-parameter --name /certs/${service.subdomain}.${domain}/fullchain.pem | jq -r .Parameter.Value > /etc/letsencrypt/live/${service.subdomain}.${domain}/fullchain.pem
    aws ssm get-parameter --name /certs/${service.subdomain}.${domain}/privkey.pem | jq -r .Parameter.Value > /etc/letsencrypt/live/${service.subdomain}.${domain}/privkey.pem
else 
    echo "USING CERT BOT TO GET A NEW CERT"
    certbot certonly --agree-tos \
        -w /var/lib/letsencrypt/ \
        --dns-route53 \
        -d ${service.subdomain}.${domain} \
        --keep --email ${email} -n
    v="$(cat /etc/letsencrypt/live/${service.subdomain}.${domain}/cert.pem)"
    aws ssm put-parameter --name /certs/${service.subdomain}.${domain}/cert.pem \
        --value "$v" --type String
    v="$(cat /etc/letsencrypt/live/${service.subdomain}.${domain}/chain.pem)"
    aws ssm put-parameter --name /certs/${service.subdomain}.${domain}/chain.pem \
        --value "$v" --type String
    v="$(cat /etc/letsencrypt/live/${service.subdomain}.${domain}/fullchain.pem)"
    aws ssm put-parameter --name /certs/${service.subdomain}.${domain}/fullchain.pem \
        --value "$v" --type String
    v="$(cat /etc/letsencrypt/live/${service.subdomain}.${domain}/privkey.pem)"
    aws ssm put-parameter --name /certs/${service.subdomain}.${domain}/privkey.pem \
        --value "$v" --type String
fi 
# RENEW IN 89 DAYS TODO
%{ endfor ~}
sudo nginx -t
systemctl restart nginx
systemctl status nginx

# optional telegram notification (intermittent)
curl -s -X POST https://api.telegram.org/bot${telegram_token}/sendMessage \
    -d chat_id=${telegram_chat_id} \
    -d text="ec2 tunnel to start9 completed: $(date)"
